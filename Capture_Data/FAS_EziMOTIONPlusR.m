function [methodinfo,structs,enuminfo,ThunkLibName]=FAS_EziMOTIONPlusR
%FAS_EZIMOTIONPLUSR Create structures to define interfaces found in 'FAS_EziMOTIONPlusR'.

%This function was generated by loadlibrary.m parser version 1.1.6.36 on Thu Feb  2 13:25:19 2017
%perl options:'FAS_EziMOTIONPlusR.i -outfile=FAS_EziMOTIONPlusR.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
% extern " C "  BOOL WINAPI FAS_Connect ( BYTE nPortNo , DWORD dwBaud ); 
fcns.name{fcnNum}='FAS_Connect'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  BOOL WINAPI FAS_OpenPort ( BYTE nPortNo , DWORD dwBaud ); 
% fcns.name{fcnNum}='FAS_OpenPort'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  BOOL WINAPI FAS_AttachSlave ( BYTE nPortNo , BYTE iSlaveNo ); 
% fcns.name{fcnNum}='FAS_AttachSlave'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  void WINAPI FAS_Close ( BYTE nPortNo ); 
fcns.name{fcnNum}='FAS_Close'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern " C "  void WINAPI FAS_EnableLog ( BOOL bEnable ); 
fcns.name{fcnNum}='FAS_EnableLog'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern " C "  BOOL WINAPI FAS_SetLogPath ( LPCTSTR lpPath ); 
fcns.name{fcnNum}='FAS_SetLogPath'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern " C "  BOOL WINAPI FAS_IsSlaveExist ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_IsSlaveExist'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='uint32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetSlaveInfo ( BYTE nPortNo , BYTE iSlaveNo , BYTE * pType , LPSTR lpBuff , int nBuffSize ); 
fcns.name{fcnNum}='FAS_GetSlaveInfo'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32', 'int32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetMotorInfo ( BYTE nPortNo , BYTE iSlaveNo , BYTE * pType , LPSTR lpBuff , int nBuffSize ); 
fcns.name{fcnNum}='FAS_GetMotorInfo'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'uint32', 'int32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetSlaveInfoEx ( BYTE nPortNo , BYTE iSlaveNo , DRIVE_INFO * lpDriveInfo ); 
% fcns.name{fcnNum}='FAS_GetSlaveInfoEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 's_DRIVE_INFOPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_SaveAllParameters ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_SaveAllParameters'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_SetParameter ( BYTE nPortNo , BYTE iSlaveNo , BYTE iParamNo , long lParamValue ); 
fcns.name{fcnNum}='FAS_SetParameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetParameter ( BYTE nPortNo , BYTE iSlaveNo , BYTE iParamNo , long * lParamValue ); 
fcns.name{fcnNum}='FAS_GetParameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetROMParameter ( BYTE nPortNo , BYTE iSlaveNo , BYTE iParamNo , long * lRomParam ); 
fcns.name{fcnNum}='FAS_GetROMParameter'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_SetIOInput ( BYTE nPortNo , BYTE iSlaveNo , DWORD dwIOSETMask , DWORD dwIOCLRMask ); 
fcns.name{fcnNum}='FAS_SetIOInput'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetIOInput ( BYTE nPortNo , BYTE iSlaveNo , DWORD * dwIOInput ); 
fcns.name{fcnNum}='FAS_GetIOInput'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_SetIOOutput ( BYTE nPortNo , BYTE iSlaveNo , DWORD dwIOSETMask , DWORD dwIOCLRMask ); 
fcns.name{fcnNum}='FAS_SetIOOutput'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetIOOutput ( BYTE nPortNo , BYTE iSlaveNo , DWORD * dwIOOutput ); 
fcns.name{fcnNum}='FAS_GetIOOutput'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetIOAssignMap ( BYTE nPortNo , BYTE iSlaveNo , BYTE iIOPinNo , DWORD * dwIOLogicMask , BYTE * bLevel ); 
fcns.name{fcnNum}='FAS_GetIOAssignMap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32Ptr', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_SetIOAssignMap ( BYTE nPortNo , BYTE iSlaveNo , BYTE iIOPinNo , DWORD dwIOLogicMask , BYTE bLevel ); 
fcns.name{fcnNum}='FAS_SetIOAssignMap'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_IOAssignMapReadROM ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_IOAssignMapReadROM'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_ServoEnable ( BYTE nPortNo , BYTE iSlaveNo , BOOL bOnOff ); 
fcns.name{fcnNum}='FAS_ServoEnable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_ServoAlarmReset ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_ServoAlarmReset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_StepAlarmReset ( BYTE nPortNo , BYTE iSlaveNo , BOOL bReset ); 
fcns.name{fcnNum}='FAS_StepAlarmReset'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetAxisStatus ( BYTE nPortNo , BYTE iSlaveNo , DWORD * dwAxisStatus ); 
fcns.name{fcnNum}='FAS_GetAxisStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetIOAxisStatus ( BYTE nPortNo , BYTE iSlaveNo , DWORD * dwInStatus , DWORD * dwOutStatus , DWORD * dwAxisStatus ); 
fcns.name{fcnNum}='FAS_GetIOAxisStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetMotionStatus ( BYTE nPortNo , BYTE iSlaveNo , long * lCmdPos , long * lActPos , long * lPosErr , long * lActVel , WORD * wPosItemNo ); 
fcns.name{fcnNum}='FAS_GetMotionStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetAllStatus ( BYTE nPortNo , BYTE iSlaveNo , DWORD * dwInStatus , DWORD * dwOutStatus , DWORD * dwAxisStatus , long * lCmdPos , long * lActPos , long * lPosErr , long * lActVel , WORD * wPosItemNo ); 
fcns.name{fcnNum}='FAS_GetAllStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_SetCommandPos ( BYTE nPortNo , BYTE iSlaveNo , long lCmdPos ); 
fcns.name{fcnNum}='FAS_SetCommandPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_SetActualPos ( BYTE nPortNo , BYTE iSlaveNo , long lActPos ); 
fcns.name{fcnNum}='FAS_SetActualPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_ClearPosition ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_ClearPosition'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetCommandPos ( BYTE nPortNo , BYTE iSlaveNo , long * lCmdPos ); 
fcns.name{fcnNum}='FAS_GetCommandPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetActualPos ( BYTE nPortNo , BYTE iSlaveNo , long * lActPos ); 
fcns.name{fcnNum}='FAS_GetActualPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetPosuint32 ( BYTE nPortNo , BYTE iSlaveNo , long * lPosErr ); 
% fcns.name{fcnNum}='FAS_GetPosuint32'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetActualVel ( BYTE nPortNo , BYTE iSlaveNo , long * lActVel ); 
fcns.name{fcnNum}='FAS_GetActualVel'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetAlarmType ( BYTE nPortNo , BYTE iSlaveNo , BYTE * nAlarmType ); 
fcns.name{fcnNum}='FAS_GetAlarmType'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetAllTorqueStatus ( BYTE nPortNo , BYTE iSlaveNo , DWORD * dwInStatus , DWORD * dwOutStatus , DWORD * dwAxisStatus , long * lCmdPos , long * lActPos , long * lPosErr , long * lActVel , WORD * wPosItemNo , WORD * wTorqueValue ); 
% fcns.name{fcnNum}='FAS_GetAllTorqueStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetTorqueStatus ( BYTE nPortNo , BYTE iSlaveNo , WORD * wTorqueValue ); 
% fcns.name{fcnNum}='FAS_GetTorqueStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveStop ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_MoveStop'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_EmergencyStop ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_EmergencyStop'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MovePause ( BYTE nPortNo , BYTE iSlaveNo , BOOL bPause ); 
fcns.name{fcnNum}='FAS_MovePause'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveOriginSingleAxis ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_MoveOriginSingleAxis'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveSingleAxisAbsPos ( BYTE nPortNo , BYTE iSlaveNo , long lAbsPos , DWORD lVelocity ); 
fcns.name{fcnNum}='FAS_MoveSingleAxisAbsPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveSingleAxisIncPos ( BYTE nPortNo , BYTE iSlaveNo , long lIncPos , DWORD lVelocity ); 
fcns.name{fcnNum}='FAS_MoveSingleAxisIncPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveToLimit ( BYTE nPortNo , BYTE iSlaveNo , DWORD lVelocity , int iLimitDir ); 
fcns.name{fcnNum}='FAS_MoveToLimit'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'int32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveVelocity ( BYTE nPortNo , BYTE iSlaveNo , DWORD lVelocity , int iVelDir ); 
fcns.name{fcnNum}='FAS_MoveVelocity'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'int32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PositionAbsOverride ( BYTE nPortNo , BYTE iSlaveNo , long lOverridePos ); 
fcns.name{fcnNum}='FAS_PositionAbsOverride'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PositionIncOverride ( BYTE nPortNo , BYTE iSlaveNo , long lOverridePos ); 
fcns.name{fcnNum}='FAS_PositionIncOverride'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_VelocityOverride ( BYTE nPortNo , BYTE iSlaveNo , DWORD lVelocity ); 
fcns.name{fcnNum}='FAS_VelocityOverride'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveLinearAbsPos ( BYTE nPortNo , BYTE nNoOfSlaves , BYTE * iSlavesNo , long * lAbsPos , DWORD lFeedrate , WORD wAccelTime ); 
fcns.name{fcnNum}='FAS_MoveLinearAbsPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'longPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveLinearIncPos ( BYTE nPortNo , BYTE nNoOfSlaves , BYTE * iSlavesNo , long * lIncPos , DWORD lFeedrate , WORD wAccelTime ); 
fcns.name{fcnNum}='FAS_MoveLinearIncPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'longPtr', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_TriggerOutput_RunA ( BYTE nPortNo , BYTE iSlaveNo , BOOL bStartTrigger , long lStartPos , DWORD dwPeriod , DWORD dwPulseTime ); 
fcns.name{fcnNum}='FAS_TriggerOutput_RunA'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'long', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_TriggerOutput_Status ( BYTE nPortNo , BYTE iSlaveNo , BYTE * bTriggerStatus ); 
fcns.name{fcnNum}='FAS_TriggerOutput_Status'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MovePush ( BYTE nPortNo , BYTE iSlaveNo , DWORD dwStartSpd , DWORD dwMoveSpd , long lPosition , WORD wAccel , WORD wDecel , WORD wPushRate , DWORD dwPushSpd , long lEndPosition , WORD wPushMode ); 
fcns.name{fcnNum}='FAS_MovePush'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32', 'long', 'uint32', 'uint32', 'uint32', 'uint32', 'long', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetPushStatus ( BYTE nPortNo , BYTE iSlaveNo , BYTE * nPushStatus ); 
fcns.name{fcnNum}='FAS_GetPushStatus'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveSingleAxisAbsPosEx ( BYTE nPortNo , BYTE iSlaveNo , long lAbsPos , DWORD lVelocity , MOTION_OPTION_EX * lpExOption ); 
fcns.name{fcnNum}='FAS_MoveSingleAxisAbsPosEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveSingleAxisIncPosEx ( BYTE nPortNo , BYTE iSlaveNo , long lIncPos , DWORD lVelocity , MOTION_OPTION_EX * lpExOption ); 
fcns.name{fcnNum}='FAS_MoveSingleAxisIncPosEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'long', 'uint32', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_MoveVelocityEx ( BYTE nPortNo , BYTE iSlaveNo , DWORD lVelocity , int iVelDir , VELOCITY_OPTION_EX * lpExOption ); 
fcns.name{fcnNum}='FAS_MoveVelocityEx'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'int32', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_AllMoveStop ( BYTE nPortNo ); 
fcns.name{fcnNum}='FAS_AllMoveStop'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_AllEmergencyStop ( BYTE nPortNo ); 
fcns.name{fcnNum}='FAS_AllEmergencyStop'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_AllMoveOriginSingleAxis ( BYTE nPortNo ); 
fcns.name{fcnNum}='FAS_AllMoveOriginSingleAxis'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_AllMoveSingleAxisAbsPos ( BYTE nPortNo , long lAbsPos , DWORD lVelocity ); 
fcns.name{fcnNum}='FAS_AllMoveSingleAxisAbsPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'long', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_AllMoveSingleAxisIncPos ( BYTE nPortNo , long lIncPos , DWORD lVelocity ); 
fcns.name{fcnNum}='FAS_AllMoveSingleAxisIncPos'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'long', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PosTableReadItem ( BYTE nPortNo , BYTE iSlaveNo , WORD wItemNo , LPITEM_NODE lpItem ); 
fcns.name{fcnNum}='FAS_PosTableReadItem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PosTableWriteItem ( BYTE nPortNo , BYTE iSlaveNo , WORD wItemNo , LPITEM_NODE lpItem ); 
fcns.name{fcnNum}='FAS_PosTableWriteItem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PosTableWriteROM ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_PosTableWriteROM'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PosTableReadROM ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_PosTableReadROM'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PosTableRunItem ( BYTE nPortNo , BYTE iSlaveNo , WORD wItemNo ); 
fcns.name{fcnNum}='FAS_PosTableRunItem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PosTableReadOneItem ( BYTE nPortNo , BYTE iSlaveNo , WORD wItemNo , WORD wOffset , long * lPosItemVal ); 
fcns.name{fcnNum}='FAS_PosTableReadOneItem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PosTableWriteOneItem ( BYTE nPortNo , BYTE iSlaveNo , WORD wItemNo , WORD wOffset , long lPosItemVal ); 
fcns.name{fcnNum}='FAS_PosTableWriteOneItem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32', 'long'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_PosTableSingleRunItem ( BYTE nPortNo , BYTE iSlaveNo , BOOL bNextMove , WORD wItemNo ); 
fcns.name{fcnNum}='FAS_PosTableSingleRunItem'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GapControlEnable ( BYTE nPortNo , BYTE iSlaveNo , WORD wItemNo , long lGapCompSpeed , long lGapAccTime , long lGapDecTime , long lGapStartSpeed ); 
fcns.name{fcnNum}='FAS_GapControlEnable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'uint32', 'long', 'long', 'long', 'long'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GapControlDisable ( BYTE nPortNo , BYTE iSlaveNo ); 
fcns.name{fcnNum}='FAS_GapControlDisable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_IsGapControlEnable ( BYTE nPortNo , BYTE iSlaveNo , BOOL * bIsEnable , WORD * wCurrentItemNo ); 
fcns.name{fcnNum}='FAS_IsGapControlEnable'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GapControlGetADCValue ( BYTE nPortNo , BYTE iSlaveNo , long * lADCValue ); 
fcns.name{fcnNum}='FAS_GapControlGetADCValue'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GapOneResultMonitor ( BYTE nPortNo , BYTE iSlaveNo , BYTE * bUpdated , long * iIndex , long * lGapValue , long * lCmdPos , long * lActPos , long * lCompValue , long * lReserved ); 
fcns.name{fcnNum}='FAS_GapOneResultMonitor'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'voidPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr', 'longPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_GetAlarmLogs ( BYTE nPortNo , BYTE iSlaveNo , ALARM_LOG * pAlarmLog ); 
% fcns.name{fcnNum}='FAS_GetAlarmLogs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32', 'ALARM_LOGPtr'};fcnNum=fcnNum+1;
% extern " C "  int WINAPI FAS_ResetAlarmLogs ( BYTE nPortNo , BYTE iSlaveNo ); 
% fcns.name{fcnNum}='FAS_ResetAlarmLogs'; fcns.calltype{fcnNum}='cdecl'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'uint32', 'uint32'};fcnNum=fcnNum+1;
structs.ALARM_LOG.members=struct('nAlarmCount', 'uint32', 'nAlarmLog', 'uint32#30');
structs.s_DRIVE_INFO.packing=1;
structs.s_DRIVE_INFO.members=struct('nVersionNo', 'uint16#4', 'sVersion', 'int8#30', 'nDriveType', 'uint16', 'nMotorType', 'uint16', 'sMotorInfo', 'int8#20', 'nInPinNo', 'uint16', 'nOutPinNo', 'uint16', 'nPTNum', 'uint16', 'nFirmwareType', 'uint16');
methodinfo=fcns;